// Generated by CoffeeScript 1.6.2
(function() {
  var Editor, debounce, urlVars,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  View.prototype._postCreate = function() {
    return this.style.backgroundColor = "rgba(255,0,0,0.5)";
  };

  View.prototype.__insertElement = function() {
    return $("#canvas").append(this._element);
  };

  urlVars = function() {
    var pair, vars, _i, _len, _ref;

    vars = {};
    _ref = window.location.search.replace("?", "").split("&");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pair = _ref[_i];
      pair = pair.split("=");
      vars[pair[0]] = pair[1];
    }
    return vars;
  };

  debounce = function(threshold, func, execAsap) {
    var debounced, timeout;

    timeout = false;
    return debounced = function() {
      var args, delayed, obj;

      obj = this;
      args = arguments;
      delayed = function() {
        if (!execAsap) {
          func.apply(obj, args);
        }
        return timeout = null;
      };
      if (timeout) {
        clearTimeout(timeout);
      } else if (execAsap) {
        func.apply(obj, args);
      }
      return timeout = utils.delay(threshold || 100, delayed);
    };
  };

  Editor = (function() {
    var LocalSaveKey;

    LocalSaveKey = "framer.editor.code";

    function Editor() {
      this._run = __bind(this._run, this);
      this._onChange = __bind(this._onChange, this);
      this.loadFile = __bind(this.loadFile, this);
      this.setCode = __bind(this.setCode, this);      this._editCount = 0;
      this._savePoint = 0;
      this._editor = ace.edit("editor");
      this._editor.session.setMode("ace/mode/javascript");
      this._editor.setTheme("ace/theme/twilight");
      this._editor.getSession().on("change", this._onChange);
    }

    Editor.prototype.run = debounce(100, function() {
      return this._run();
    });

    Editor.prototype.setCode = function(code) {
      if (!code) {
        return;
      }
      this._editor.setValue(code);
      this._editor.session.selection.clearSelection();
      this._editor.moveCursorTo(0, 0);
      return this._updateChangeCount();
    };

    Editor.prototype.getCode = function() {
      return this._editor.getValue();
    };

    Editor.prototype.saveLocal = function() {
      localStorage.setItem(this.LocalSaveKey, this.getCode());
      return this._savePoint = this._editCount;
    };

    Editor.prototype.loadLocal = function() {
      this.setCode(localStorage.getItem(this.LocalSaveKey));
      return this.run();
    };

    Editor.prototype.fileUrl = function() {
      return urlVars().path;
    };

    Editor.prototype.gistId = function() {
      return urlVars().gist;
    };

    Editor.prototype.loadFile = function(path) {
      var _this = this;

      return $.get(path, function(data) {
        return _this.setCode(data);
      });
    };

    Editor.prototype.loadGist = function() {};

    Editor.prototype.saveGist = function() {
      return $.get(path, function(data) {
        editor.setValue(data);
        editor.session.selection.clearSelection();
        return editor.moveCursorTo(0, 0);
      });
    };

    Editor.prototype._updateChangeCount = function() {
      return this._editCount += 1;
    };

    Editor.prototype._onChange = function() {
      this._updateChangeCount();
      this._track("Editor", "Edit");
      return this.run();
    };

    Editor.prototype._clearTimers = function() {
      var timer, _i, _len, _ref, _results;

      if (window._delayTimers) {
        _ref = window._delayTimers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          timer = _ref[_i];
          _results.push(clearTimeout(timer));
        }
        return _results;
      }
    };

    Editor.prototype._track = debounce(500, function(module, type, data) {
      if (this._editCount < 6) {
        return;
      }
      return _gaq.push(["_trackEvent", module, type, data]);
    });

    Editor.prototype._run = function() {
      var code;

      this._clearTimers();
      code = this.getCode();
      if (!code) {
        return;
      }
      $("#canvas").html("");
      eval(code);
      return this.saveLocal();
    };

    return Editor;

  })();

  $(document).ready(function() {
    var editor;

    editor = new Editor();
    if (editor.fileUrl()) {
      return editor.loadFile(editor.fileUrl());
    } else {
      return editor.loadLocal();
    }
  });

}).call(this);
